PROJECT_CONTEXT: Admin frontend for managing teams, users, levels, feedback sessions with Next.js 14, TypeScript, and Supabase.
TECH_STACK: Next.js 14 (App Router), TypeScript, Tailwind CSS, Shadcn UI, Radix UI, React Query, React Hook Form, Supabase
COMPONENT_ARCHITECTURE: Feature-first modular architecture with strict separation of concerns and optimized for React Server Components
DIRECTORY_STRUCTURE:
public/{file.svg, globe.svg, next.svg, vercel.svg, window.svg}
src/{
app/{(routes)/{admin/{}}
admin/{clusters/{page.tsx}, levels/{page.tsx}, processes/{page.tsx}, teams/{page.tsx}
users/{page.tsx}, layout.tsx}
favicon.ico, globals.css, layout.tsx, page.tsx}
components/{clusters/{clusters-table.tsx}, layout/{admin-header.tsx}
levels/{levels-table.tsx}, processes/{processes-table.tsx}
stats/{stat-card.tsx}
teams/{memberships-table.tsx, memberships-view.tsx, teams-table.tsx, teams-view.tsx}
ui/{button.tsx, input.tsx, sheet.tsx, table.tsx, tabs.tsx}
users/{users-table.tsx}}
lib/{utils.ts}}
.gitignore, .windsurfrules, .windsurfrules.new, components.json
eslint.config.mjs, next-env.d.ts, next.config.ts, package-lock.json
package.json, postcss.config.mjs, README.md, tailwind.config.ts, tsconfig.json
update_directory.ps1
COMPONENT_ORGANIZATION:
admin-modules: Each admin module follows ModuleTable/ModuleForm/ModuleActions pattern
shared-components: Reusable components with clear interfaces and documentation
feature-components: Domain-specific components with dedicated business logic
NAMING_CONVENTIONS:
directories: lowercase-with-dashes
components: PascalCase
utilities: camelCase
types: PascalCase
routes: lowercase
COMPONENT_IMPLEMENTATION:
use-client: Minimize usage, prefer RSC
state-management: React Query for server state, Context for minimal global state
forms: React Hook Form with centralized validation schemas
error-handling: Global boundaries and standardized error responses
performance: Code splitting, lazy loading, and proper suspense boundaries
CODE_ORGANIZATION:
barrel-exports: Use index.ts for clean imports
module-structure: components/hooks/types pattern
component-structure: Single responsibility, clear interfaces
STYLING_APPROACH:
primary: Tailwind CSS with utility-first approach
theming: Centralized in tailwind.config.ts
custom-styles: Minimal, only in globals.css when necessary
PERFORMANCE_GUIDELINES:
server-components: Maximize usage of RSC
client-components: Implement proper suspense boundaries
data-fetching: Leverage React Query with proper caching
code-splitting: Route-based and component-based splitting
DEVELOPMENT_WORKFLOW:
version-control: Feature branches with clear commit messages
documentation: Inline TSDoc comments and README updates
testing: Jest for units, Cypress for E2E
code-quality: ESLint and Prettier with strict rules
DEPLOYMENT_STRATEGY:
platform: Vercel with automatic deployments
environment: Proper env variable management
monitoring: Vercel Analytics and custom error tracking
security: Proper API key management and secure headers
